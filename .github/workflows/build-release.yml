name: Build and Auto-Release Flutter App

on:
  push:
    branches: [main]
    paths-ignore:
      - "pubspec.yaml"

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Bump version patch
        id: bump
        run: |
          FILE=pubspec.yaml
          VERSION=$(grep '^version:' $FILE | awk '{print $2}' | cut -d+ -f1)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          sed -i "s/^version: .*/version: $NEW_VERSION+1/" $FILE
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit bumped version
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}
          git add pubspec.yaml
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
          git push origin main

  build-apk:
    needs: version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.version.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install dependencies
        run: flutter pub get

      - name: Create .env
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Build APK
        run: flutter build apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build-windows:
    needs: version
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Enable Windows
        run: flutter config --enable-windows-desktop

      - name: Replace pubspec.yaml with Windows version
        run: |
          Remove-Item pubspec.yaml
          Copy-Item pubspec-windows.yaml pubspec.yaml
        shell: pwsh

      - name: Remove linux_screen.dart to avoid build errors on Windows
        run: Remove-Item lib/screens/posts/components/video_player/linux_screen.dart -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Replace video_player_platform.dart for Windows build
        run: echo "export 'screen.dart';" > lib/screens/posts/components/video_player/video_player_platform.dart
        shell: bash

      - name: Show final video_player_platform.dart
        run: cat lib/screens/posts/components/video_player/video_player_platform.dart
        shell: bash

      - name: Install dependencies
        run: flutter pub get

      - name: Create .env
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Build Windows
        run: flutter build windows

      - name: Zip .exe
        run: Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath windows-build.zip

      - name: Upload Windows ZIP
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: windows-build.zip

  release:
    needs: [build-apk, build-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Create Git Tag
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}
          git tag v${{ needs.build-apk.outputs.version }}
          git push origin v${{ needs.build-apk.outputs.version }}

      - name: Print release version
        run: |
          echo "Releasing version: ${{ needs.build-apk.outputs.version }}"

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: dist

      - name: Download Windows ZIP
        uses: actions/download-artifact@v4
        with:
          name: windows-zip
          path: dist

      - name: Create Git Tag (if not exists)
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}

          TAG="v${{ needs.build-apk.outputs.version }}"
          echo "Generated tag: $TAG"

          # Protection contre tag vide
          if [ "$TAG" = "v" ]; then
            echo "‚ùå ERROR: version is missing, refusing to create empty tag"
            exit 1
          fi

          if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
            echo "Tag $TAG already exists remotely. Skipping."
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-apk.outputs.version }}
          name: Release v${{ needs.build-apk.outputs.version }}
          files: |
            dist/app-release.apk
            dist/windows-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
